<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\SNR_MC_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\SNR_MC_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 09 10:31:04 2024
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; sys_init &rArr; CurrentOffsetCalibration &rArr; MCPWM_init &rArr; MCPWM_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[40]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">WAKE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">WAKE_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC_IRQHandler</a> from interrupt.o(i.ADC_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[14]">CMP_IRQHandler</a> from interrupt.o(i.CMP_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[16]">DMA_IRQHandler</a> from interrupt.o(i.DMA_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[11]">GPIO_IRQHandler</a> from interrupt.o(i.GPIO_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[12]">HALL_IRQHandler</a> from interrupt.o(i.HALL_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_snr8503x.o(.text) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[f]">I2C_IRQHandler</a> from interrupt.o(i.I2C_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[1b]">M1M1_Fault</a> from m1_statemachine.o(i.M1M1_Fault) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[1c]">M1M1_Init</a> from m1_statemachine.o(i.M1M1_Init) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[1e]">M1M1_Run</a> from m1_statemachine.o(i.M1M1_Run) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[22]">M1M1_RunAlign</a> from m1_statemachine.o(i.M1M1_RunAlign) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[25]">M1M1_RunBrake</a> from m1_statemachine.o(i.M1M1_RunBrake) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[1f]">M1M1_RunCalib</a> from m1_statemachine.o(i.M1M1_RunCalib) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[21]">M1M1_RunFreerun_Det</a> from m1_statemachine.o(i.M1M1_RunFreerun_Det) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[20]">M1M1_RunReady</a> from m1_statemachine.o(i.M1M1_RunReady) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[24]">M1M1_RunSpin</a> from m1_statemachine.o(i.M1M1_RunSpin) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[23]">M1M1_RunStartup</a> from m1_statemachine.o(i.M1M1_RunStartup) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[1d]">M1M1_Stop</a> from m1_statemachine.o(i.M1M1_Stop) referenced from m1_statemachine.o(.constdata)
 <LI><a href="#[d]">MCPWM0_IRQHandler</a> from interrupt.o(i.MCPWM0_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[e]">MCPWM1_IRQHandler</a> from interrupt.o(i.MCPWM1_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_snr8503x.o(.text) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_snr8503x.o(.text) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_snr8503x.o(.text) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[10]">SPI_IRQHandler</a> from interrupt.o(i.SPI_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_snr8503x.o(.text) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[18]">SW_IRQHandler</a> from interrupt.o(i.SW_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[19]">SystemInit</a> from hardware_init.o(i.SystemInit) referenced from startup_snr8503x.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from interrupt.o(i.TIMER0_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from interrupt.o(i.TIMER1_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[13]">UART_IRQHandler</a> from interrupt.o(i.UART_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[17]">WAKE_IRQHandler</a> from interrupt.o(i.WAKE_IRQHandler) referenced from startup_snr8503x.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_snr8503x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[33]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sys_init &rArr; CurrentOffsetCalibration &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_snr8503x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snr8503x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snr8503x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snr8503x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snr8503x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_snr8503x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[36]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_StructInit
</UL>

<P><STRONG><a name="[c4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_COMPENSATION_Cal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNormalization
</UL>

<P><STRONG><a name="[3b]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[3a]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNormalization
</UL>

<P><STRONG><a name="[cd]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[ce]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNormalization
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNormalization
</UL>

<P><STRONG><a name="[cf]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[31]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>ADC_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, interrupt.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_IRQHandler &rArr; Digital_Value_Getting
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digital_Value_Getting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, snr8503x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[47]"></a>ADC_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, snr8503x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[46]"></a>ADC_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, hardware_init.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_init &rArr; ADC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[48]"></a>BLDC_Brake</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mc_drive.o(i.BLDC_Brake))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLDC_Brake
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunBrake
</UL>

<P><STRONG><a name="[4a]"></a>BLDC_Sensor_Judge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sensor_control.o(i.BLDC_Sensor_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BLDC_Sensor_Judge &rArr; BLDC_Sensor_control &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Update
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_control
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>BLDC_Sensor_control</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, sensor_control.o(i.BLDC_Sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLDC_Sensor_control &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunStartup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_Judge
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>BLDC_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mc_drive.o(i.BLDC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_Fault
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_SwitchRunStop
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_protect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_current_protect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Block_Protect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_TEMP_protect
</UL>

<P><STRONG><a name="[4f]"></a>BLDC_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, snr_bldc_hall_v1p0.o(i.BLDC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLDC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[14]"></a>CMP_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, interrupt.o(i.CMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMP_IRQHandler &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CMP_Init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, snr8503x_cmp.o(i.CMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[54]"></a>CMP_StructInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, snr8503x_cmp.o(i.CMP_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[53]"></a>CMP_init</STRONG> (Thumb, 66 bytes, Stack size 120 bytes, hardware_init.o(i.CMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMP_init &rArr; CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[55]"></a>CWCCW_PowerOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_drive.o(i.CWCCW_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CWCCW_PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>CWCCW_ReadIO</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mc_drive.o(i.CWCCW_ReadIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CWCCW_ReadIO
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[9c]"></a>CalcGraudNormalizationData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, speedramp.o(i.CalcGraudNormalizationData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcGraudNormalizationData
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
</UL>

<P><STRONG><a name="[58]"></a>CalcNormalization</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, speedramp.o(i.CalcNormalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalcNormalization &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
</UL>

<P><STRONG><a name="[8f]"></a>CalcPI</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pid.o(i.CalcPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcPI
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiCurrentLimitPWMDuty
</UL>

<P><STRONG><a name="[5b]"></a>Clock_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hardware_init.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5f]"></a>CurrentOffsetCalibration</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, system_init.o(i.CurrentOffsetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CurrentOffsetCalibration &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[95]"></a>Current_Limit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, protect.o(i.Current_Limit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[61]"></a>DAC_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, snr8503x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[64]"></a>DAC_OutputValue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, snr8503x_dac.o(i.DAC_OutputValue))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[62]"></a>DAC_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, snr8503x_dac.o(i.DAC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[63]"></a>DAC_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hardware_init.o(i.DAC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC_init &rArr; DAC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_StructInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutputValue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9f]"></a>DC_offset_protect</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_init.o(i.DC_offset_protect))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[16]"></a>DMA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DSP_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, snr8503x_dsp.o(i.DSP_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[43]"></a>Digital_Value_Getting</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, interrupt.o(i.Digital_Value_Getting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Digital_Value_Getting
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>GPIO_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, snr8503x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICP_Loader
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[66]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, snr8503x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[56]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, snr8503x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICP_Loader
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWCCW_ReadIO
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWCCW_PowerOn
</UL>

<P><STRONG><a name="[68]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, snr8503x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, snr8503x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[67]"></a>GPIO_init</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, hardware_init.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiplex_nRST
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[6d]"></a>HALL_ClearIRQFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, snr8503x_hall.o(i.HALL_ClearIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>HALL_GetFilterValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, snr8503x_hall.o(i.HALL_GetFilterValue))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunStartup
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>HALL_GetIRQFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, snr8503x_hall.o(i.HALL_GetIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>HALL_IRQHandler</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, interrupt.o(i.HALL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HALL_IRQHandler &rArr; BLDC_Sensor_Judge &rArr; BLDC_Sensor_control &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_WIDCount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetIRQFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_ClearIRQFlag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_control
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_Judge
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetFilterValue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HALL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, snr8503x_hall.o(i.HALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
</UL>

<P><STRONG><a name="[71]"></a>HALL_Perip_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, hardware_init.o(i.HALL_Perip_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HALL_Perip_Init &rArr; HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_StructInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[72]"></a>HALL_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, snr8503x_hall.o(i.HALL_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
</UL>

<P><STRONG><a name="[4b]"></a>HALL_Update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, snr_bldc_hall_v1p0.o(i.HALL_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HALL_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_Judge
</UL>

<P><STRONG><a name="[6f]"></a>HALL_WIDCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, snr8503x_hall.o(i.HALL_WIDCount))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>Hardware_init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, hardware_init.o(i.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hardware_init &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_DISABLE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Cmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ICP_Loader</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, snr_bldc_hall_v1p0.o(i.ICP_Loader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ICP_Loader &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>IWDG_DISABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, snr8503x_iwdg.o(i.IWDG_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[7d]"></a>InitNormalization</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, speedramp.o(i.InitNormalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitNormalization &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>InitPI</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, pid.o(i.InitPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitPI
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[7f]"></a>Init_Parameter</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, global_variable.o(i.Init_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_Parameter &rArr; InitPI
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPI
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>M1M1_Fault</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M1M1_Fault &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>MCPWM0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.MCPWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCPWM0_IRQHandler &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MCPWM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.MCPWM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>MCPWM_Init</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, snr8503x_mcpwm.o(i.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[84]"></a>MCPWM_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, snr8503x_mcpwm.o(i.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[60]"></a>MCPWM_init</STRONG> (Thumb, 154 bytes, Stack size 128 bytes, hardware_init.o(i.MCPWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[85]"></a>MOS_Check_Step</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mostest.o(i.MOS_Check_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MOS_Check_Step &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTest
</UL>

<P><STRONG><a name="[86]"></a>MOS_TEMP_protect</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, protect.o(i.MOS_TEMP_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOS_TEMP_protect &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[87]"></a>MosTest</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, mostest.o(i.MosTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MosTest &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_Check_Step
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Motor_Block_Protect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, protect.o(i.Motor_Block_Protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Block_Protect &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[89]"></a>Motor_LED_DISP</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, mc_drive.o(i.Motor_LED_DISP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_LED_DISP &rArr; Motor_LED_Error
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LED_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[8a]"></a>Motor_LED_Error</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, mc_drive.o(i.Motor_LED_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motor_LED_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LED_DISP
</UL>

<P><STRONG><a name="[6a]"></a>Multiplex_nRST</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_init.o(i.Multiplex_nRST))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[8b]"></a>OVER_current_protect</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, protect.o(i.OVER_current_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OVER_current_protect &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[77]"></a>PGA_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hardware_init.o(i.PGA_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PGA_init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[49]"></a>PWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, snr8503x_mcpwm.o(i.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Brake
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunStartup
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>

<P><STRONG><a name="[8c]"></a>Phase_COMPENSATION_Cal</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mc_drive.o(i.Phase_COMPENSATION_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Phase_COMPENSATION_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[8e]"></a>PiCurrentLimitPWMDuty</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mc_drive.o(i.PiCurrentLimitPWMDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PiCurrentLimitPWMDuty &rArr; CalcPI
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPI
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
</UL>

<P><STRONG><a name="[50]"></a>Read_Trim</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lks32mc03x_nvr.o(i.Read_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_init
</UL>

<P><STRONG><a name="[10]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SW_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SW_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, snr8503x_sys.o(i.SYS_AnalogModuleClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[52]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, snr8503x_sys.o(i.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Cmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[5e]"></a>SYS_SoftResetModule</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, snr8503x_sys.o(i.SYS_SoftResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[5d]"></a>SoftDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware_init.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardware_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_IRQHandler &rArr; ICP_Loader &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICP_Loader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM_TimerInit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, snr8503x_timer.o(i.TIM_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[9b]"></a>TIM_TimerStrutInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, snr8503x_timer.o(i.TIM_TimerStrutInit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[91]"></a>Task_Scheduler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.Task_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task_Scheduler &rArr; VSP_Control_Motor &rArr; CalcNormalization &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procHander
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_protect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSP_Control_Motor
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDealTX
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDealRX
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_COMPENSATION_Cal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_current_protect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_LED_DISP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Block_Protect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_TEMP_protect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Limit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWCCW_ReadIO
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>UART0_init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ur_ctrl.o(i.UART0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART0_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9a]"></a>UART0_init_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ur_ctrl.o(i.UART0_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[13]"></a>UART_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, interrupt.o(i.UART_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>UART_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, snr8503x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[98]"></a>UART_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, snr8503x_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[78]"></a>UTimer_init</STRONG> (Thumb, 88 bytes, Stack size 112 bytes, hardware_init.o(i.UTimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UTimer_init &rArr; TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerStrutInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[96]"></a>UartDealRX</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, ur_ctrl.o(i.UartDealRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UartDealRX
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[97]"></a>UartDealTX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ur_ctrl.o(i.UartDealTX))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[93]"></a>VSP_Control_Motor</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mc_drive.o(i.VSP_Control_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VSP_Control_Motor &rArr; CalcNormalization &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNormalization
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcGraudNormalizationData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiCurrentLimitPWMDuty
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[94]"></a>Vol_protect</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, protect.o(i.Vol_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vol_protect &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[17]"></a>WAKE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.WAKE_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAKE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAKE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snr8503x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mostest.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_Check_Step
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>

<P><STRONG><a name="[5c]"></a>delay_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[75]"></a>delay_ms</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[7b]"></a>delay_us</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9d]"></a>delay_xms</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, delay.o(i.delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; sys_init &rArr; CurrentOffsetCalibration &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNormalization
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetFilterValue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWCCW_PowerOn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTest
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPI
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[92]"></a>procHander</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, protect.o(i.procHander))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[9e]"></a>sys_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_init.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_init &rArr; CurrentOffsetCalibration &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_offset_protect
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>variable_reset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, global_variable.o(i.variable_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = variable_reset &rArr; InitPI
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPI
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_Stop
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_Init
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNormalization
</UL>

<P><STRONG><a name="[d5]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hardware_init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[79]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardware_init.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[1c]"></a>M1M1_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M1M1_Init &rArr; variable_reset &rArr; InitPI
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>M1M1_Run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m1_statemachine.o(i.M1M1_Run))
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>M1M1_RunAlign</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m1_statemachine.o(i.M1M1_RunAlign))
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>M1M1_RunBrake</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_RunBrake))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M1M1_RunBrake &rArr; BLDC_Brake
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Brake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>M1M1_RunCalib</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m1_statemachine.o(i.M1M1_RunCalib))
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>M1M1_RunFreerun_Det</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_RunFreerun_Det))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M1M1_RunFreerun_Det &rArr; M1M1_SwitchRunStop &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_SwitchRunStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>M1M1_RunReady</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m1_statemachine.o(i.M1M1_RunReady))
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>M1M1_RunSpin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_RunSpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M1M1_RunSpin &rArr; M1M1_SwitchRunStop &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_SwitchRunStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>M1M1_RunStartup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, m1_statemachine.o(i.M1M1_RunStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = M1M1_RunStartup &rArr; BLDC_Sensor_control &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_SwitchRunStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Sensor_control
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetFilterValue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>M1M1_Stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M1M1_Stop &rArr; variable_reset &rArr; InitPI
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1_statemachine.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>M1M1_SwitchRunStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m1_statemachine.o(i.M1M1_SwitchRunStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M1M1_SwitchRunStop &rArr; BLDC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunStartup
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunSpin
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M1_RunFreerun_Det
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
